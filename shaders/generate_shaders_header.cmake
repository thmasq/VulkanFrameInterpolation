# Generate the main embedded shaders header file

set(SHADER_NAMES "interpolate_frame" "motion_estimation" "optical_flow")
set(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/include/shaders/embedded_shaders.h")

# Start building the header file line by line
file(WRITE ${OUTPUT_FILE} "#pragma once\n")
file(APPEND ${OUTPUT_FILE} "#include <cstdint>\n")
file(APPEND ${OUTPUT_FILE} "#include <cstddef>\n")
file(APPEND ${OUTPUT_FILE} "#include <cstring>\n")
file(APPEND ${OUTPUT_FILE} "\n")
file(APPEND ${OUTPUT_FILE} "// Auto-generated embedded shader headers\n")
file(APPEND ${OUTPUT_FILE} "// Do not edit manually - generated by CMake build system\n")
file(APPEND ${OUTPUT_FILE} "\n")
file(APPEND ${OUTPUT_FILE} "namespace EmbeddedShaders {\n")
file(APPEND ${OUTPUT_FILE} "\n")

# Generate shader data structs
foreach(SHADER_NAME ${SHADER_NAMES})
    file(APPEND ${OUTPUT_FILE} "    // ${SHADER_NAME} shader data\n")
    file(APPEND ${OUTPUT_FILE} "    #include \"${SHADER_NAME}.h\"\n")
    file(APPEND ${OUTPUT_FILE} "    \n")
    file(APPEND ${OUTPUT_FILE} "    struct ${SHADER_NAME}_data {\n")
    file(APPEND ${OUTPUT_FILE} "        static const unsigned char* data() { return ${SHADER_NAME}_spv; }\n")
    file(APPEND ${OUTPUT_FILE} "        static size_t size() { return ${SHADER_NAME}_spv_len; }\n")
    file(APPEND ${OUTPUT_FILE} "    };\n")
    file(APPEND ${OUTPUT_FILE} "    \n")
endforeach()

# Add ShaderData struct
file(APPEND ${OUTPUT_FILE} "    // Shader lookup structure\n")
file(APPEND ${OUTPUT_FILE} "    struct ShaderData {\n")
file(APPEND ${OUTPUT_FILE} "        const unsigned char* data;\n")
file(APPEND ${OUTPUT_FILE} "        size_t size;\n")
file(APPEND ${OUTPUT_FILE} "        const char* name;\n")
file(APPEND ${OUTPUT_FILE} "    };\n")
file(APPEND ${OUTPUT_FILE} "    \n")

# Start shader array
file(APPEND ${OUTPUT_FILE} "    // Available shaders array\n")
file(APPEND ${OUTPUT_FILE} "    static const ShaderData available_shaders[] = {\n")

# Add each shader to the array
foreach(SHADER_NAME ${SHADER_NAMES})
    file(APPEND ${OUTPUT_FILE} "        { ${SHADER_NAME}_data::data(), ${SHADER_NAME}_data::size(), \"${SHADER_NAME}\" },\n")
endforeach()

# Close array and add helper function
file(APPEND ${OUTPUT_FILE} "    };\n")
file(APPEND ${OUTPUT_FILE} "    \n")
file(APPEND ${OUTPUT_FILE} "    static const size_t shader_count = sizeof(available_shaders) / sizeof(ShaderData);\n")
file(APPEND ${OUTPUT_FILE} "    \n")
file(APPEND ${OUTPUT_FILE} "    // Helper function to find shader by name\n")
file(APPEND ${OUTPUT_FILE} "    inline const ShaderData* find_shader(const char* name) {\n")
file(APPEND ${OUTPUT_FILE} "        for (size_t i = 0; i < shader_count; ++i) {\n")
file(APPEND ${OUTPUT_FILE} "            if (strcmp(available_shaders[i].name, name) == 0) {\n")
file(APPEND ${OUTPUT_FILE} "                return &available_shaders[i];\n")
file(APPEND ${OUTPUT_FILE} "            }\n")
file(APPEND ${OUTPUT_FILE} "        }\n")
file(APPEND ${OUTPUT_FILE} "        return nullptr;\n")
file(APPEND ${OUTPUT_FILE} "    }\n")
file(APPEND ${OUTPUT_FILE} "    \n")
file(APPEND ${OUTPUT_FILE} "} // namespace EmbeddedShaders\n")

message(STATUS "Generated embedded shaders header: ${OUTPUT_FILE}")
